{
  "copyright": {
    "prefix": "copyright pal public",
    "body": [
      "# Copyright (c) ${1:year} PAL Robotics S.L. All rights reserved.",
      "#",
      "# Licensed under the Apache License, Version 2.0 (the \"License\");",
      "# you may not use this file except in compliance with the License.",
      "# You may obtain a copy of the License at",
      "#",
      "#     http://www.apache.org/licenses/LICENSE-2.0",
      "#",
      "# Unless required by applicable law or agreed to in writing, software",
      "# distributed under the License is distributed on an \"AS IS\" BASIS,",
      "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "# See the License for the specific language governing permissions and",
      "# limitations under the License.",
      ""
    ],
    "description": "pal public copyright snippet for python files"
  },
  "copyrightprivate": {
    "prefix": "copyright pal private",
    "body": [
      "# Copyright (c) ${1:year} PAL Robotics SL. All Rights Reserved",
      "#",
      "# Unauthorized copying of this file, via any medium is strictly prohibited,",
      "# unless it was supplied under the terms of a license agreement or",
      "# nondisclosure agreement with PAL Robotics SL. In this case it may not be",
      "# copied or disclosed except in accordance with the terms of that agreement.",
      ""
    ]
  },
  "roslaunchfile": {
    "prefix": "ros2 pal launch file template",
    "body": [
      "from launch import LaunchDescription",
      "from launch.actions import (",
      "    DeclareLaunchArgument,",
      ")",
      "from launch_pal.robot_arguments import CommonArgs",
      "from launch_pal.arg_utils import LaunchArgumentsBase",
      "from dataclasses import dataclass",
      "",
      "@dataclass(frozen=True)",
      "class LaunchArguments(LaunchArgumentsBase):",
      "    is_public_sim: DeclareLaunchArgument = CommonArgs.is_public_sim",
      "",
      "def generate_launch_description():",
      "",
      "    # Create the launch description and populate",
      "    ld = LaunchDescription()",
      "    launch_arguments = LaunchArguments()",
      "    launch_arguments.add_to_launch_description(ld)",
      "    declare_actions(ld, launch_arguments)",
      "    return ld",
      "",
      "def declare_actions(launch_description: LaunchDescription, launch_args: LaunchArguments):",
      "    launch_description.add_action()"
    ]
  },
  "opaquefunction": {
    "prefix": "create launch opaque function",
    "body": [
      "from launch.actions import OpaqueFunction",
      "def ${1:template_opaque_function_name}(context, *args, **kwargs):",
      "  return None",
      "launch_description.add_action(OpaqueFunction(function=${1:template_opaque_function_name}))"
    ]
  }
}
